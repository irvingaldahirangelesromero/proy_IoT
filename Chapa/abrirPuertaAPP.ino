#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "UTHH-Alumnos";      // ğŸ”¹ Cambia por el nombre de tu red WiFi
const char* password = "";  // ğŸ”¹ Cambia por tu contraseÃ±a

WebServer server(80);  // Servidor HTTP en el puerto 80
const int relayPin = 14;  // ğŸ”¹ Pin donde estÃ¡ conectado el relÃ©

// Estado de la puerta: true = abierta, false = cerrada
bool isDoorOpen = false;

void setup() {
  Serial.begin(115200);
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, HIGH);  // ğŸ”¹ Mantener la cerradura cerrada inicialmente

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nâœ… Conectado a WiFi");
  Serial.print("ğŸ“¡ DirecciÃ³n IP de la ESP32: ");
  Serial.println(WiFi.localIP());  // ğŸ”¹ Muestra la IP en el Monitor Serial

  // ğŸ“Œ Ruta para alternar el estado de la puerta (abrir/cerrar)
  server.on("/abrir-cerrar", []() {
    if (!isDoorOpen) {
      // Si la puerta estÃ¡ cerrada, la abrimos
      Serial.println("ğŸ”“ Â¡Puerta Abierta!");
      digitalWrite(relayPin, LOW);  // ğŸ”¹ Activa el relÃ© para abrir la puerta
      delay(5000);  // ğŸ”¹ Mantener la puerta abierta por 5 segundos
      digitalWrite(relayPin, HIGH);  // ğŸ”¹ Cerrar la puerta automÃ¡ticamente
      isDoorOpen = true;
      server.send(200, "text/plain", "Puerta abierta y cerrada automÃ¡ticamente.");
    } else {
      // Si la puerta estÃ¡ abierta, la cerramos
      Serial.println("ğŸ”’ Â¡Puerta Cerrada!");
      digitalWrite(relayPin, HIGH);  // ğŸ”¹ Cierra la puerta
      isDoorOpen = false;
      server.send(200, "text/plain", "Puerta cerrada.");
    }
  });

  server.begin();
  Serial.println("ğŸš€ Servidor HTTP iniciado");
}

void loop() {
  server.handleClient();  // ğŸ“Œ Necesario para manejar las solicitudes entrantes
}
